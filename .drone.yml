---
kind: pipeline
name: e2e-kubernetes-1.16

platform:
  os: linux
  arch: amd64

steps:
  - name: init
    image: quay.io/sighup/e2e-testing-drone-plugin:v0.2.0-rc4
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ clone ]
    settings:
      action: cluster-116
      pipeline_id: cluster-116
      instance_path: /shared
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-install
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.16.3_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-116
      - bats -t katalog/tests/velero/velero-install.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.16.3_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-install ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-116
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: init-aws
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore ]
    environment:
      CI_PIPELINE_NUMBER: cluster-116-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd example/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
      - terraform output cloud_credentials > /shared/cloud_credentials.config
      - terraform output volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output backup_storage_location > /shared/backup_storage_location.yaml
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: apply-aws-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.16.3_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-aws ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-116
      - kubectl create secret generic cloud-credentials --from-file=cloud=/shared/cloud_credentials.config --dry-run -o yaml | kubectl apply -f - -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore-aws
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.16.3_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-aws-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-116
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: destroy-aws
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      CI_PIPELINE_NUMBER: cluster-116-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd example/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: init-gcp
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS: 
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: cluster-116-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - cd example/gcp-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
      - terraform output cloud_credentials > /shared/cloud_credentials.config
      - terraform output volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output backup_storage_location > /shared/backup_storage_location.yaml
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: apply-gcp-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.16.3_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-gcp ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-116
      - kubectl create secret generic cloud-credentials --from-file=cloud=/shared/cloud_credentials.config --dry-run -o yaml | kubectl apply -f - -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-gcp | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore-gcp
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.16.3_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-gcp-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-116
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: destroy-gcp
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS: 
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: cluster-116-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd example/gcp-example
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
    when:
      status:
      - success
      - failure

  - name: init-azure
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      CI_PIPELINE_NUMBER: k8s116azu
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd example/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
      - terraform output cloud_credentials > /shared/cloud_credentials.config
      - terraform output volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output backup_storage_location > /shared/backup_storage_location.yaml
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: apply-azure-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.16.3_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-azure ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-116
      - kubectl create secret generic cloud-credentials --from-file=cloud=/shared/cloud_credentials.config --dry-run -o yaml | kubectl apply -f - -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-azure | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore-azure
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.16.3_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-azure-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-116
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: destroy-azure
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-azure ]
    environment:
      CI_PIPELINE_NUMBER: k8s116azu
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd example/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: destroy
    image: quay.io/sighup/e2e-testing-drone-plugin:v0.2.0-rc4
    pull: always
    depends_on: [ test-backup-restore-azure ]
    settings:
      action: destroy
      pipeline_id: cluster-116
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
    when:
      status:
      - success
      - failure

volumes:
- name: shared
  temp: {}

---
kind: pipeline
name: e2e-kubernetes-1.15

platform:
  os: linux
  arch: amd64

steps:
  - name: init
    image: quay.io/sighup/e2e-testing-drone-plugin:v0.2.0-rc4
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ clone ]
    settings:
      action: cluster-115
      pipeline_id: cluster-115
      instance_path: /shared
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-install
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.15.6_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-115
      - bats -t katalog/tests/velero/velero-install.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.15.6_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-install ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-115
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: init-aws
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore ]
    environment:
      CI_PIPELINE_NUMBER: cluster-115-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd example/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
      - terraform output cloud_credentials > /shared/cloud_credentials.config
      - terraform output volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output backup_storage_location > /shared/backup_storage_location.yaml
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: apply-aws-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.15.6_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-aws ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-115
      - kubectl create secret generic cloud-credentials --from-file=cloud=/shared/cloud_credentials.config --dry-run -o yaml | kubectl apply -f - -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore-aws
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.15.6_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-aws-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-115
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: destroy-aws
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      CI_PIPELINE_NUMBER: cluster-115-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd example/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: init-gcp
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS: 
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: cluster-115-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - cd example/gcp-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
      - terraform output cloud_credentials > /shared/cloud_credentials.config
      - terraform output volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output backup_storage_location > /shared/backup_storage_location.yaml
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: apply-gcp-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.15.6_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-gcp ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-115
      - kubectl create secret generic cloud-credentials --from-file=cloud=/shared/cloud_credentials.config --dry-run -o yaml | kubectl apply -f - -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-gcp | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore-gcp
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.15.6_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-gcp-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-115
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: destroy-gcp
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS: 
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: cluster-115-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd example/gcp-example
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
    when:
      status:
      - success
      - failure

  - name: init-azure
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      CI_PIPELINE_NUMBER: k8s115azu
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd example/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
      - terraform output cloud_credentials > /shared/cloud_credentials.config
      - terraform output volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output backup_storage_location > /shared/backup_storage_location.yaml
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: apply-azure-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.15.6_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-azure ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-115
      - kubectl create secret generic cloud-credentials --from-file=cloud=/shared/cloud_credentials.config --dry-run -o yaml | kubectl apply -f - -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-azure | kubectl apply -f - -n kube-system
      - kubectl rollout restart deploy velero -n kube-system
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore-azure
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.15.6_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-azure-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-115
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: destroy-azure
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-azure ]
    environment:
      CI_PIPELINE_NUMBER: k8s115azu
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd example/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: destroy
    image: quay.io/sighup/e2e-testing-drone-plugin:v0.2.0-rc4
    pull: always
    depends_on: [ test-backup-restore-azure ]
    settings:
      action: destroy
      pipeline_id: cluster-115
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
    when:
      status:
      - success
      - failure

volumes:
- name: shared
  temp: {}

---
kind: pipeline
name: e2e-kubernetes-1.14

platform:
  os: linux
  arch: amd64

steps:
  - name: init
    image: quay.io/sighup/e2e-testing-drone-plugin:v0.2.0-rc4
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ clone ]
    settings:
      action: cluster-114
      pipeline_id: cluster-114
      instance_path: /shared
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-install
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.14.9_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-114
      - bats -t katalog/tests/velero/velero-install.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.14.9_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-install ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-114
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: init-aws
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore ]
    environment:
      CI_PIPELINE_NUMBER: cluster-114-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd example/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
      - terraform output cloud_credentials > /shared/cloud_credentials.config
      - terraform output volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output backup_storage_location > /shared/backup_storage_location.yaml
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: apply-aws-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.14.9_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-aws ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-114
      - kubectl create secret generic cloud-credentials --from-file=cloud=/shared/cloud_credentials.config --dry-run -o yaml | kubectl apply -f - -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kubectl -n kube-system patch deployment velero -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"`date +'%s'`\"}}}}}"
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore-aws
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.14.9_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-aws-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-114
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: destroy-aws
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      CI_PIPELINE_NUMBER: cluster-114-aws
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd example/aws-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
        --backend-config="region=$${AWS_DEFAULT_REGION}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: init-gcp
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-aws ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS: 
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: cluster-114-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - cd example/gcp-example
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
      - terraform output cloud_credentials > /shared/cloud_credentials.config
      - terraform output volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output backup_storage_location > /shared/backup_storage_location.yaml
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: apply-gcp-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.14.9_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-gcp ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-114
      - kubectl create secret generic cloud-credentials --from-file=cloud=/shared/cloud_credentials.config --dry-run -o yaml | kubectl apply -f - -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-gcp | kubectl apply -f - -n kube-system
      - kubectl -n kube-system patch deployment velero -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"`date +'%s'`\"}}}}}"
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore-gcp
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.14.9_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-gcp-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-114
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: destroy-gcp
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      GCP_PROJECT:
        from_secret: gcp_project
      GCP_CREDENTIALS: 
        from_secret: gcp_credentials
      GCP_CREDENTIALS_PATH: /shared/terraform-credentials.json
      CI_PIPELINE_NUMBER: cluster-114-gcp
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
    commands:
      - cd example/gcp-example
      - echo $${GCP_CREDENTIALS} > $${GCP_CREDENTIALS_PATH}
      - export GOOGLE_APPLICATION_CREDENTIALS=$${GCP_CREDENTIALS_PATH}
      - terraform init
        --backend=true
        --backend-config="bucket=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="prefix=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
        --var="gcp_project"=$${GCP_PROJECT}
    when:
      status:
      - success
      - failure

  - name: init-azure
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-gcp ]
    environment:
      CI_PIPELINE_NUMBER: k8s114azu
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd example/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform apply
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
      - terraform output cloud_credentials > /shared/cloud_credentials.config
      - terraform output volume_snapshot_location > /shared/volume_snapshot_location.yaml
      - terraform output backup_storage_location > /shared/backup_storage_location.yaml
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: apply-azure-configuration
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.14.9_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ init-azure ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-114
      - kubectl create secret generic cloud-credentials --from-file=cloud=/shared/cloud_credentials.config --dry-run -o yaml | kubectl apply -f - -n kube-system
      - kubectl apply -f /shared/backup_storage_location.yaml -n kube-system
      - kustomize build katalog/velero/velero-azure | kubectl apply -f - -n kube-system
      - kubectl -n kube-system patch deployment velero -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"`date +'%s'`\"}}}}}"
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: test-backup-restore-azure
    image: quay.io/sighup/e2e-testing:1.1.0_0.1.3_2.16.1_1.4.0_1.14.9_3.2.2_2.4.1
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ apply-azure-configuration ]
    commands:
      - export KUBECONFIG=/shared/kube/kubeconfig-114
      - curl -Ls -o velero.tar.gz https://github.com/vmware-tanzu/velero/releases/download/v1.2.0/velero-v1.2.0-linux-amd64.tar.gz
      - tar -zxf velero.tar.gz
      - mv velero*/velero /usr/local/bin/velero
      - bats -t katalog/tests/velero/velero-backup.sh
    when:
      ref:
        include:
          - refs/heads/hotfix-*
          - refs/tags/**

  - name: destroy-azure
    image: hashicorp/terraform:0.12.16
    pull: always
    volumes:
    - name: shared
      path: /shared
    depends_on: [ test-backup-restore-azure ]
    environment:
      CI_PIPELINE_NUMBER: k8s114azu
      TERRAFORM_TF_STATES_BUCKET_NAME:
        from_secret: terraform_tf_states_bucket_name
      STORAGE_ACCOUNT_NAME:
        from_secret: storage_account_name
      RESOURCE_GROUP_NAME:
        from_secret: resource_group_name
      ARM_CLIENT_ID:
        from_secret: arm_client_id
      ARM_CLIENT_SECRET:
        from_secret: arm_client_secret
      ARM_SUBSCRIPTION_ID:
        from_secret: arm_subscription_id
      ARM_TENANT_ID:
        from_secret: arm_tenant_id
    commands:
      - cd example/azure-example
      - terraform init
        --backend=true
        --backend-config="storage_account_name=$${STORAGE_ACCOUNT_NAME}"
        --backend-config="resource_group_name=$${RESOURCE_GROUP_NAME}"
        --backend-config="container_name=$${TERRAFORM_TF_STATES_BUCKET_NAME}"
        --backend-config="key=${CI_REPO}/${DRONE_BRANCH}/${CI_BUILD_NUMBER}/$${CI_PIPELINE_NUMBER}"
      - terraform destroy
        --auto-approve
        --var="my_cluster_name=$${CI_PIPELINE_NUMBER}"
    when:
      status:
      - success
      - failure

  - name: destroy
    image: quay.io/sighup/e2e-testing-drone-plugin:v0.2.0-rc4
    pull: always
    depends_on: [ test-backup-restore-azure ]
    settings:
      action: destroy
      pipeline_id: cluster-114
      aws_default_region:
        from_secret: aws_region
      aws_access_key_id:
        from_secret: aws_access_key_id
      aws_secret_access_key:
        from_secret: aws_secret_access_key
      terraform_tf_states_bucket_name:
        from_secret: terraform_tf_states_bucket_name
    when:
      status:
      - success
      - failure

volumes:
- name: shared
  temp: {}
